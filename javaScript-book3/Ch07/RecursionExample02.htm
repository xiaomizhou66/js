<!DOCTYPE html>
<html>

<head>
  <title>Recursion Example</title>
</head>

<body>
  <script type="text/javascript">
    //函数声明使用函数名来递归，会相互影响
    function factorial(num) {
      if (num <= 1) {
        return 1;
      } else {
        return num * factorial(num - 1);
      }
    }

    var anotherFactorial = factorial;
    factorial = null;
    //console.log(anotherFactorial(4)); //error!




    /*  "use strict"; */
    /*  可以使用arguments.callee替代函数名，但是严格模式就不能使用arguments.callee  与arguments.caller了 */

    function factorial1(num) {
      if (num <= 1) {
        return 1;
      } else {
        return num * arguments.callee(num - 1);
      }
    }

    var anotherFactorial1 = factorial1;
    factorial1 = null;
    console.log(anotherFactorial1(4)); //24




    /* 要用函数表达式来做递归 */
    var factorial2 = function func(num) {
      if (num <= 1) {
        return 1;
      } else {
        return num * func(num - 1);
      }
    };
    var rr = factorial2;
    factorial2 = null;
    console.log(rr(4)); //24


    var factorial3 = (function f(num) {
      if (num <= 1) {
        return 1;
      } else {
        return num * f(num - 1);
      }
    });
    var rr = factorial3;
    factorial3 = null;
    console.log(rr(4)); //24
  </script>

</body>

</html>